@page "/manageCategories"
@inherits BaseComponent

<h3>Categorias</h3>
@if(this._categories == null)
{
    <p>Cargando...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in this._categories)
            {
                <tr>
                    @if(this._categoryBeingModified == null || category.ExpenseCategoryId != this._categoryBeingModified.ExpenseCategoryId)
                    {
                        <td> @category.ExpenseCategoryName </td>
                        <td>
                            <div style="white-space: nowrap">
                                <button disabled="@this._isProcessingRequest" @onclick="() => this._categoryBeingModified = category" class="btn btn-primary">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <button disabled="@this._isProcessingRequest" @onclick="async () => await this.DeleteCategory(category.ExpenseCategoryId)" class="btn btn-danger">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </td>
                    }
                    else
                    {
                        <td> <MudTextField @bind-Value=this._categoryBeingModified.ExpenseCategoryName T="string"> </MudTextField> </td>
                        <td>
                            <div style="white-space: nowrap">
                                <button disabled="@this._isProcessingRequest" @onclick="async () => await this.UpdateCategory()" class="btn btn-success">
                                    <span class="oi oi-check"></span>
                                </button>
                                <button disabled="@this._isProcessingRequest" @onclick="() => this._categoryBeingModified = null" class="btn btn-danger">
                                    <span class="oi oi-x"></span>
                                </button>
                            </div>
                        </td>
                    }
                </tr>
            }
            <tr>
                <td>
                    <MudTextField @bind-Value=this._newCategoryName T="string"> </MudTextField>
                </td>
                <td>
                    <div style="white-space: nowrap">
                        <button disabled="@this._isProcessingRequest" @onclick="async () => await this.AddNewCategory()" class="btn btn-primary">
                            <span class="oi oi-plus"></span>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
}


@code {
    [Inject]
    public IExpenseCategoriesService ExpenseCategoriesService { get; set; } = null!;

    private bool _isProcessingRequest = false;
    private List<ExpenseCategory>? _categories;
    private string _newCategoryName = "Nombre de la nueva categoria";
    private ExpenseCategory? _categoryBeingModified = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this._categories = await this.ExpenseCategoriesService.ReadAll();
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Error inesperado al intentar cargar las categorias, se recargara la pagina");
            this.ReloadPage(4000);
        }
    }

    private async Task AddNewCategory()
    {
        var newCategoryViewModel = new ExpenseCategoryViewModel
            {
                ExpenseCategoryName = this._newCategoryName
            };
        try
        {
            ExpenseCategory createdCategory = await this.ExpenseCategoriesService.Create(newCategoryViewModel);
            this._categories!.Add(createdCategory); // _categories can't be null as it is initialized in the OnInitializeAsync method
            this._newCategoryName = "Nombre de la nueva categoria";
            this.StateHasChanged();
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Error inesperado al intentar crear la nueva categoria");
        }
    }

    private async Task UpdateCategory()
    {
        this._isProcessingRequest = true;
        try
        {
            var modifiedCategoryView = new ExpenseCategoryViewModel
                {
                    ExpenseCategoryName = this._categoryBeingModified!.ExpenseCategoryName
                };
            var updatedCategory = await this.ExpenseCategoriesService.Update(this._categoryBeingModified.ExpenseCategoryId, modifiedCategoryView);
            if (updatedCategory == null)
                throw new Exception("Unexpected exception, the category that was tried to be updated wasnt't found");
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Error inesperado al intentar modificar la categoria");
        }
        finally
        {
            this._isProcessingRequest = false;
            this._categoryBeingModified = null;
        }
    }

    private async Task DeleteCategory(int categorryId)
    {
        this._isProcessingRequest = true;

        try
        {
            ExpenseCategory? deletedCategory = await this.ExpenseCategoriesService.Delete(categorryId);
            if (deletedCategory == null)
                throw new Exception("Logic error when deliting category: the category wasn't found");

            var deletedCategoryInList = this._categories!.FirstOrDefault(c => c.ExpenseCategoryId == categorryId);
            if(deletedCategoryInList != null)
                this._categories!.Remove(deletedCategoryInList);
            this.StateHasChanged();
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Error inesperado al intentar eliminar la categoria");
        }
        finally
        {
            this._isProcessingRequest = false;
        }
    }
}
