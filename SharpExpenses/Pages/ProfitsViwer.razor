@page "/profitsViwer"
@inherits BaseComponent

@if(this._isLoading)
{
    <p>Cargando...</p>
}
else
{
    <h1>Visor de ganancias</h1>
    <div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                <div class="row">
                    <div class="col-4">
                        <h4>Ganancias</h4>
                    </div>
                    @{
                        string dateFormat = "dd/MMMM/yyyy";
                        OpenTo openTo = OpenTo.Date;
                        int? fixDay = null,
                        fixMonth = null;

                        @switch (this._period.PeriodDivision)
                        {
                            case ProfitOfPeriodRequest.TimeLapses.Month:
                                dateFormat = "MMMM/yyyy";
                                openTo = OpenTo.Month;
                                fixDay = 1;
                                break;

                            case ProfitOfPeriodRequest.TimeLapses.Year:
                                dateFormat = "yyyy";
                                openTo = OpenTo.Year;
                                fixDay = 1;
                                fixMonth = 1;
                                break;
                        }

                        <div class="col-4">
                            <MudDatePicker Label="Comienzo del periodo" Date="@this._periodStart" DateChanged="@( async (newDate) => await this.OnPeriodStartChanged(newDate) )" DateFormat="@dateFormat" OpenTo="@openTo" FixDay="@fixDay" FixMonth="@fixMonth" />
                        </div>

                        <div class="col-4">
                            <MudDatePicker Label="Final del periodo" Date="@this._periodEnd" DateChanged="@( async (newDate) => await this.OnPeriodEndChanged(newDate) )" DateFormat="@dateFormat" OpenTo="@openTo" FixDay="@fixDay" FixMonth="@fixMonth" />
                        </div>
                    }
                    <div class="col-4">
                        <RadzenDropDown @bind-Value=this._periodDivision Data=this._timeLapsesList Change="@( async () => await this.OnPeriodDivisionChanged() )" />
                    </div>
                </div>
                <RadzenChart>
                    <RadzenColumnSeries Data="@this._profitPerSubPeriods" CategoryProperty="ShortenedPeriodDate" Title="Ganancias netas" LineType="LineType.Dashed" ValueProperty="NetIncome">
                        <RadzenSeriesDataLabels Visible="@this._showDataLabels" />
                    </RadzenColumnSeries>
                    <RadzenColumnOptions Radius="5" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Ganancias en MXN" />
                    </RadzenValueAxis>
                </RadzenChart>
                <div class="row">
                    <div class="col-4">
                        <p>Ganancias antes de impuestos: @this._totalIncomeBeforeTax</p>
                    </div>
                    <div class="col-4">
                        <p>Ganancias netas: @this._totalNetIncome</p>
                    </div>
                </div>
                <RadzenCard class="w-100 mb-4">
                    <RadzenCheckBox @bind-Value="@this._showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Mostrar etiquetas de datos" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
                </RadzenCard>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public IProfitPerPeriodsService ProfitPerPeriodService { get; set; } = null!;
    private List<ProfitOfPeriod> _profitPerSubPeriods = new List<ProfitOfPeriod>();
    private ProfitOfPeriodRequest _period = new ProfitOfPeriodRequest();
    private List<string> _timeLapsesList = new List<string>();
    private double _totalIncomeBeforeTax = 0;
    private double _totalNetIncome = 0;
    private bool _showDataLabels = true;
    private bool _isLoading = true;

    private string _periodDivision
    {
        get
        {
            return ProfitOfPeriodRequest.GetTimeLapseTranslation(this._period.PeriodDivision);
        }
        set
        {
            this._period.PeriodDivision = ProfitOfPeriodRequest.GetTimeLapseFromTranslatedString(value);
        }
    }

    private DateTime? _periodStart
    {
        get
        {
            return this._period.PeriodStart;
        }
        set
        {
            DateTime notNullValue = value ?? DateTime.Now;
            this._period.PeriodStart = notNullValue;
        }
    }

    private DateTime? _periodEnd
    {
        get
        {
            return this._period.PeriodEnd;
        }
        set
        {
            DateTime notNullValue = value ?? DateTime.Today;

            this._period.PeriodEnd = this._period.PeriodDivision switch
            {
                ProfitOfPeriodRequest.TimeLapses.Day => notNullValue.AddDays(1).AddSeconds(-1),
                ProfitOfPeriodRequest.TimeLapses.Month => notNullValue.AddMonths(1).AddSeconds(-1),
                ProfitOfPeriodRequest.TimeLapses.Year => notNullValue.AddYears(1).AddSeconds(-1),
                _ => throw new ArgumentException($"The enum value of {this._period.PeriodDivision} Has no case in property {nameof(this._periodEnd)}")
            };
        }
    }


    protected override async Task OnInitializedAsync()
    {
        this._timeLapsesList = ProfitOfPeriodRequest.GetEveryTimeLapseTranslation();
        this.InitializePeriods();
        await this.LoadProfitsPerPeriods();
    }

    private async Task LoadProfitsPerPeriods()
    {
        try
        {
            this._isLoading = true;
            this._profitPerSubPeriods.Clear();
            this._totalIncomeBeforeTax = 0;
            this._totalNetIncome = 0;

            this._profitPerSubPeriods = await this.ProfitPerPeriodService.Read(this._period);
            this._profitPerSubPeriods = this._profitPerSubPeriods.OrderBy(p => p.PeriodDate).ToList();
            this.CalculateTotalBeforeTaxAndNetIncome();
            this._isLoading = false;
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Ocurrio un error al cargar las ganancias del periodo");
            throw;
        }
    }


    private void InitializePeriods()
    {
        var currentDate = DateTime.Today;
        var currentMonth = new DateTime(currentDate.Year, currentDate.Month, 1);

        ProfitOfPeriodRequest defaultPeriod = this._period.PeriodDivision switch
        {
            ProfitOfPeriodRequest.TimeLapses.Day => new ProfitOfPeriodRequest
                {
                    PeriodStart = currentDate.AddDays(-14),
                    PeriodEnd = currentDate.AddHours(23).AddMinutes(59).AddSeconds(59)
                },
            ProfitOfPeriodRequest.TimeLapses.Month => new ProfitOfPeriodRequest
                {
                    PeriodStart = currentMonth.AddMonths(-2),
                    PeriodEnd = currentMonth.AddMonths(1).AddSeconds(-1)
                },
            ProfitOfPeriodRequest.TimeLapses.Year => new ProfitOfPeriodRequest
                {
                    PeriodStart = new DateTime(currentDate.Year -1, 1, 1),
                    PeriodEnd = new DateTime(currentDate.Year, 12, 31)
                },
            _ => throw new Exception($"The selected period Division {this._period.PeriodDivision} doesnt have a initialization case")
        };
        defaultPeriod.PeriodDivision = this._period.PeriodDivision;


        this._period = defaultPeriod;
    }

    private void CalculateTotalBeforeTaxAndNetIncome()
    {
        foreach (var profitOfPeriod in this._profitPerSubPeriods)
        {
            this._totalIncomeBeforeTax += profitOfPeriod.IncomeBeforeTaxes;
            this._totalNetIncome += profitOfPeriod.NetIncome;
        }
    }

    private async Task OnPeriodStartChanged(DateTime? newDate)
    {
        this._periodStart = newDate;
        await this.LoadProfitsPerPeriods();
    }

    private async Task OnPeriodEndChanged(DateTime? newDate)
    {
        this._periodEnd = newDate;
        await this.LoadProfitsPerPeriods();
    }

    private async Task OnPeriodDivisionChanged()
    {
        this.InitializePeriods();
        await this.LoadProfitsPerPeriods();
    }

}
