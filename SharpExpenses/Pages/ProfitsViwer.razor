@page "/profitsViwer"
@inherits BaseComponent

<h1>Visor de ganancias</h1>
<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <h4>Ganancias</h4>
            <RadzenChart>
                <RadzenColumnSeries Data="@this._profitPerPeriods" Title="Ganancias netas" LineType="LineType.Dashed" ValueProperty="NetIncome">
                    <RadzenSeriesDataLabels Visible="@this._showDataLabels" />
                </RadzenColumnSeries>
                <RadzenColumnOptions Radius="5" />
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Ganancias en MXN" />
                </RadzenValueAxis>
            </RadzenChart>
            
            <RadzenCard class="w-100 mb-4" >
                <RadzenCheckBox @bind-Value="@this._showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Mostrar etiquetas de datos" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    private List<ProfitOfPeriod> _profitPerPeriods = new List<ProfitOfPeriod>();
    private List<ProfitOfPeriodRequest> _periods = new List<ProfitOfPeriodRequest>();
    private bool _showDataLabels = true;

    [Inject]
    public IProfitPerPeriodsService ProfitPerPeriodService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        this.InitializePeriods();
        await this.InitializeProfitsPerPeriods();
    }

    private async Task InitializeProfitsPerPeriods()
    {
        try
        {
            ProfitOfPeriod profitOfDefaultPeriod = await this.ProfitPerPeriodService.Read(this._periods[0]);
            this._profitPerPeriods.Add(profitOfDefaultPeriod);
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Ocurrio un error al cargar las ganancias del periodo");
            throw;
        }
    }

    private void InitializePeriods()
    {
        var currentDate = DateOnly.FromDateTime(DateTime.Now);
        var defaultPeriod = new ProfitOfPeriodRequest
        {
            PeriodStart = currentDate.AddMonths(-1),
            PeriodEnd = currentDate
        };
        this._periods.Add(defaultPeriod);
    }
}
