@page "/"
@using SharedModels.Models;
@using SharedModels.Models.ViewModels;

@inherits BaseComponent

<PageTitle>Administracion de gastos</PageTitle>

<h1>Gastos</h1>

@if (this._expenses == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Hora</th>
                <th>Cantidad gastada</th>
                <th>Importancia</th>
                <th>Tipo</th>
                <th>Categoria</th>
                <th>Descripcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in this._expenses)
            {
                string importance = Expense.GetImportanceTranslation(expense.Importance),
                       type = Expense.GetTypeTranslation(expense.Type);
                <tr>
                    <td>@expense.DateInLocalTime.ToString("dd MMM yyyy")</td>
                    <td>@expense.DateInLocalTime.ToShortTimeString()</td>
                    <td>$ @expense.AmountSpent</td>
                    <td>@importance </td>
                    <td>@type</td>
                    <td>@expense.CategoryName</td>
                    <td style="white-space: pre-wrap">@expense.Description</td>
                    <td>
                        <div style="white-space: nowrap">
                            <button disabled="@this._isProcessingRequest" @onclick="() => this.UpdateExpense(expense)" class="btn btn-primary">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button disabled="@this._isProcessingRequest" @onclick="async () => await this.DeleteExpense(expense.ExpenseId)" class="btn btn-danger">
                                <span class="oi oi-x"></span>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public IExpensesService _expensesService { get; set; } = null!;
    [Inject]
    public ExpenseUpdateStateService ExpenseUpdateStateService { get; set; } = null!;

    private List<ExpenseViewModel>? _expenses;
    private bool _isProcessingRequest = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this._expenses = await this._expensesService.ReadAll();
            this._isProcessingRequest = false;
        }
        catch (Exception)
        {
            this.NotificationService.ShowErrorNotification("Ocurrio un error inesperado al cargar los gastos.");
            throw;
        }
    }

    private async Task DeleteExpense(int expenseId)
    {
        this._isProcessingRequest = true;
        try
        {
            Expense? deletedExpense = await this._expensesService.Delete(expenseId);
            if (deletedExpense == null)
                throw new Exception($"Logic error tyring to delete a expense, the expense with id: {expenseId} could't be found");
            if(deletedExpense.ExpenseId != expenseId)
                throw new Exception($"Logic error tyring to delete a expense, the expense with id: {deletedExpense.ExpenseId} was deleted instead it should have been ExpenseId: {expenseId}");
            this._expenses!.Remove(this._expenses.FirstOrDefault(expense => expense.ExpenseId == expenseId)!); // Remove's argument can be null for reference types.   // _expenses cannot be null, as it is initialized in OnInitializedAsync method
            this.NotificationService.ShowNotification("Gasto eliminado", NotificationSeverity.Success);
        }
        catch(Exception)
        {
            this.NotificationService.ShowErrorNotification("Ocurrio un error inesperad al intentar eliminar el gasto");
        }
        finally { this._isProcessingRequest = false; }
    }

    private void UpdateExpense(ExpenseViewModel expenseView)
    {
        this._isProcessingRequest = true;
        ExpenseRequest expenseRequest = new ExpenseRequest
            {
                Type = expenseView.Type,
                Importance = expenseView.Importance,
                CategoryId = expenseView.CategoryId,
                AmountSpent = expenseView.AmountSpent,
                Date = expenseView.Date,
                Description = expenseView.Description
            };
        this.ExpenseUpdateStateService.ExpenseId = expenseView.ExpenseId;
        this.ExpenseUpdateStateService.CurrentExpenseRequest = expenseRequest;
        this.UriHelper.NavigateTo("/modifyExpense");
    }
}
