@page "/"
@using SharedModels.Models.ViewModels;
@using SharpExpenses.Services.Contracts;

<PageTitle>Administracion de gastos</PageTitle>

<h1>Gastos</h1>

@if (this._expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Hora</th>
                <th>Cantidad gastada</th>
                <th>Importancia</th>
                <th>Tipo</th>
                <th>Categoria</th>
                <th>Descripcion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in this._expenses)
            {
                <tr>
                    <td>@expense.Date.ToString("dd MMM yyyy")</td>
                    <td>@expense.Date.ToShortTimeString()</td>
                    <td>$ @expense.AmountSpent</td>
                    <td>@expense.Importance</td>
                    <td>@expense.Type</td>
                    <td>@expense.CategoryName</td>
                    <td>@((MarkupString)FormatDescription(expense.Description)!)</td>
                    <td>
                        <button class="btn btn-primary">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger">X</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public IExpensesService _expensesService { get; set; } = null!;

    private List<ExpenseViewModel>? _expenses;

    protected override async Task OnInitializedAsync()
    {
        this._expenses = await this._expensesService.ReadAll();
    }

    private string? FormatDescription(string? description)
    {
        if (String.IsNullOrEmpty(description))
            return null;
        return description.Replace("\n", "<br>");
    }

}
